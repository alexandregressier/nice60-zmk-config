/*
 * Copyright (c) 2021 Nick Winans
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/reset.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 34 35 36 37 38 39 40 47 48 49 50 51 52 57 58 59 60 6>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 18 28 29 30 31 32 41 42 43 44 45 53 54 55 19 33 46>;
        };

        ss: smart_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <200>;
        };

        i_morph: i_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "I_MORPH";
            bindings = <&kp I>, <&kp UP_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        j_morph: j_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "J_MORPH";
            bindings = <&kp J>, <&kp LEFT_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        k_morph: k_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "K_MORPH";
            bindings = <&kp K>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        l_morph: l_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "L_MORPH";
            bindings = <&kp L>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        hmr_j: homerow_mods_right_j {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_J";
            bindings = <&kp>, <&j_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 18 28 29 30 31 32 41 42 43 44 45 53 54 55 19 33 46>;
        };

        hmr_k: homerow_mods_right_k {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_K";
            bindings = <&kp>, <&k_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 18 28 29 30 31 32 41 42 43 44 45 53 54 55 19 33 46>;
        };

        hmr_l: homerow_mods_right_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_L";
            bindings = <&kp>, <&l_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 18 28 29 30 31 32 41 42 43 44 45 53 54 55 19 33 46>;
        };

        hmr_colon: homerow_mods_right_colon {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_COLON";
            bindings = <&kp>, <&colon_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 18 28 29 30 31 32 41 42 43 44 45 53 54 55 19 33 46>;
        };

        colon_morph: colon_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_MORPH";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_ctrl_f1 {
            bindings = <&kp LC(F1)>;
            key-positions = <35 36 37>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_ctrl_f2 {
            bindings = <&kp LC(F2)>;
            key-positions = <21 22 23>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_ctrl_f3 {
            bindings = <&kp LC(F3)>;
            key-positions = <48 49 50>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <43 44>;
            require-prior-idle-ms = <150>;
            slow-release;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <44 45>;
            require-prior-idle-ms = <150>;
            slow-release;
        };

        combo_clipboard_history {
            bindings = <&kp LS(LG(V))>;
            key-positions = <43 44 45>;
        };

        combo_select_all {
            bindings = <&kp LG(A)>;
            key-positions = <30 31 32>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <36 37>;
        };

        combo_ctrl_f4 {
            bindings = <&kp LC(F4)>;
            key-positions = <8 9 10>;
            slow-release;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------
            // | ESC |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |   BKSP   |
            // | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   "|"   |
            // | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER    |
            // |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  /  |      SHIFT       |
            // |  CTL  |  WIN  |  ALT  |            SPACE              |  ALT  |  WIN  |  MO(1) |  CTL  |
            // ------------------------------------------------------------------------------------------

            bindings = <
&gresc      &kp N1               &kp N2           &kp N3           &kp N4             &kp N5  &kp N6     &kp N7                &kp N8              &kp N9              &kp N0                      &kp MINUS      &kp EQUAL          &kp BSPC
&kp TAB     &kp Q                &kp W            &kp E            &kp R              &kp T   &kp Y      &kp U                 &i_morph            &kp O               &kp P                       &kp LBKT       &kp RBKT           &kp BSLH
&kp ESCAPE  &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G   &kp H      &hmr_j RIGHT_SHIFT 0  &hmr_k RIGHT_GUI 0  &hmr_l RIGHT_ALT 0  &hmr_colon RIGHT_CONTROL 0  &kp SQT                           &kp RET
&ss         &kp Z                &kp X            &kp C            &kp V              &kp B   &kp N      &kp M                 &kp COMMA           &kp DOT             &kp FSLH                                                      &ss
&kp LCTRL   &kp LEFT_ALT                          &kp LEFT_GUI                                &kp SPACE                                                                &kp RIGHT_GUI               &kp RIGHT_ALT  &kp RIGHT_CONTROL  &mo 1
            >;
        };

        rgb_layer {
            // ------------------------------------------------------------------------------------------------
            // | BT CLR | F1  | F2  | F3  | F4  | F5  | F6  | F7  | F8  | F9  | F10  | F11 | F12 | EFFECT REV |
            // |  BT 1   |   |  UP |   | HUEUP | SATUP | BRIUP | SPDUP |   |     |    |     |     |           |
            // |   BT 2   | LT |  DN  | RT | HUEDN | SATDN | BRIDN | SPDDN |   |     |   |     |  EFFECT FORW |
            // |    BT 3     |     |      |      |     |     |     |     |     |     |     |                  |
            // |   BT 4  |      |      |             TOG RGB                | PRT SCR |       |       |  DEL  |
            // ------------------------------------------------------------------------------------------------

            bindings = <
&bt BT_CLR    &kp F1    &kp F2    &kp F3     &kp F4           &kp F5           &kp F6           &kp F7           &kp F8  &kp F9  &kp F10    &kp F11  &kp F12     &rgb_ug RGB_EFR
&bt BT_SEL 0  &trans    &kp UP    &trans     &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans  &trans  &trans     &trans   &trans      &bootloader
&bt BT_SEL 1  &kp LEFT  &kp DOWN  &kp RIGHT  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans  &trans  &trans     &trans               &rgb_ug RGB_EFF
&bt BT_SEL 2  &trans    &trans    &trans     &trans           &trans           &trans           &trans           &trans  &trans  &trans                          &trans
&bt BT_SEL 3  &trans              &trans                                       &rgb_ug RGB_TOG                                   &kp PSCRN  &trans   &kp DELETE  &trans
            >;
        };

        vm {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp LC(LA(F))  &kp LC(LA(G))  &kp LC(LA(H))  &kp LC(LA(I))     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(E))  &kp LC(LA(A))  &kp LC(LA(B))  &kp LC(LA(C))  &kp LC(LA(D))     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans         &trans         &trans         &kp LC(LA(SEMI))  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(N))  &kp LC(LA(J))  &kp LC(LA(K))  &kp LC(LA(L))  &kp LC(LA(M))                     &trans
&trans  &trans          &trans                  &trans                                                      &trans            &trans  &trans  &trans
            >;
        };
    };
};
